@using MyHdfViewer.Models
@using Microsoft.FluentUI.AspNetCore.Components

<FluentCard>
    <FluentStack Orientation="Orientation.Vertical"
        HorizontalAlignment="HorizontalAlignment.Stretch"
        VerticalAlignment="VerticalAlignment.Center"
        HorizontalGap="4">

        <div class="card-body">
            <div class="mb-3">
                <strong>File:</strong> @FileModel.FileName
            </div>

            <FluentTreeView Items="@TreeItems" @bind-SelectedItem:get="@SelectedItem" @bind-SelectedItem:set="@OnSelectedItemChanged" LazyLoadItems="true">
                <ItemTemplate>
                    @context.Text
                </ItemTemplate>
            </FluentTreeView>

        </div>
    </FluentStack>
</FluentCard>

@code {
    [Parameter]
    public Hdf5FileModel FileModel { get; set; } = null!;

    [Parameter]
    public Hdf5Node? SelectedNode { get; set; }

    [Parameter]
    public EventCallback<Hdf5Node> OnNodeSelected { get; set; }

    private ITreeViewItem? SelectedItem;
    private IEnumerable<ITreeViewItem>? TreeItems = new List<ITreeViewItem>();

    private Dictionary<ITreeViewItem, Hdf5Node> TreeItemToNodeMap = new Dictionary<ITreeViewItem, Hdf5Node>();

    private Icon FileCollapsed = new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Folder();
    private Icon FileExpanded = new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.FolderOpen();
    private Icon DataExpanded = new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.DocumentText();

    protected override void OnInitialized()
    {
        TreeItemToNodeMap.Clear();

        var rootTreeItem = CreateTree(FileModel.RootGroup);

        TreeItems = new List<ITreeViewItem> { rootTreeItem };
        SelectedItem = rootTreeItem;

        //TreeItems = rootTreeItem.Items;

        SelectedItem = TreeItems?.ElementAt(0);

        if (SelectedItem != null && TreeItemToNodeMap.TryGetValue(SelectedItem, out var node))
        {
            OnNodeSelected.InvokeAsync(node);
        }
    }

    private TreeViewItem CreateTree(Hdf5Node node)
    {
        var treeItem = new TreeViewItem();

        treeItem.Text = $"{node.Name}";

        if( node.NodeType == Hdf5NodeType.Dataset )
        {
            treeItem.IconCollapsed = DataExpanded;
            treeItem.IconExpanded =  DataExpanded;
        }
        else
        {
            treeItem.IconCollapsed = FileCollapsed;
            treeItem.IconExpanded =  FileExpanded;
        }

        TreeItemToNodeMap[treeItem] = node;

        if (node is Hdf5Group group && group.Children.Any())
        {
            var childItems = new List<ITreeViewItem>();

            foreach (var child in group.Children)
            {
                childItems. Add(CreateTree(child));
            }

            treeItem.Items = childItems;
        }

        return treeItem;
    }

    private async Task OnSelectedItemChanged(ITreeViewItem? newValue)
    {
        SelectedItem = newValue;

        if (newValue != null && TreeItemToNodeMap.TryGetValue(newValue, out var node))
        {
            // Call the callback with the selected node
            await OnNodeSelected.InvokeAsync(node);
        }
    }
}
