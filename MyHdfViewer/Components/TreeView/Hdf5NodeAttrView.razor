@using MyHdfViewer.Models
@using Microsoft.FluentUI.AspNetCore.Components

<FluentCard>
    <FluentStack Orientation="Orientation.Vertical"
        HorizontalAlignment="HorizontalAlignment.Stretch"
        VerticalAlignment="VerticalAlignment.Center"
        HorizontalGap="4">
    <div class="card-body">
        @if (Node is Hdf5Dataset dataset)
        {
            @if (Node.Attributes.Any())
            {
                <h6>Attribute</h6>

                <FluentDataGrid Items="@NodeAttributes">
                    <PropertyColumn Property="@(n => n.Name)" style="width: 100%;" />
                    <PropertyColumn Property="@(n => n.Value)" style="width: 100%;" />
                </FluentDataGrid>
            }
            else
            {
                <h6>No Attribute</h6>
            }

            <p><strong>Type:</strong> @dataset.DataType</p>
            <p><strong>Rank:</strong> @(dataset.Dimensions.Length.ToString())</p>
            <p><strong>Size:</strong> @(string.Join(" x ", dataset.Dimensions))</p>

            @if (dataset.Data != null)
            {
                <div>
                    <p><strong>데이터 미리보기:</strong></p>
                    <pre>
                        @foreach (var data in dataset.GetDataArray())
                        {
                            @(data + "\n")
                        }
                    </pre>
                </div>
            }
            else
            {
                //<button class="btn btn-sm btn-primary" @onclick="() => LoadDataset()">데이터 로드</button>
            }
        }



    </div>
    </FluentStack>
</FluentCard>

@code {
    [Parameter]
    public Hdf5Node Node { get; set; } = null!;

    record NodeAttribute(string Name, string Value);

    IQueryable<NodeAttribute> NodeAttributes =>GetNodeAttributes();

    private IQueryable<NodeAttribute> GetNodeAttributes()
    {
        var attributes = new List<NodeAttribute>();

        foreach (var attr in Node.Attributes)
        {
            attributes.Add(new NodeAttribute(attr.Name, attr.Value.ToString() ?? ""));
        }

        return attributes.AsQueryable();
    }

    //private async Task LoadDataset()
    //{
    //    if (Node is Hdf5Dataset dataset && dataset.Data == null)
    //    {
    //        // Implement dataset loading logic here
    //        // For example:
    //        // await dataset.LoadDataAsync();
    //        // StateHasChanged();
    //    }
    //}
}
