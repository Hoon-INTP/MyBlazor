@using MyHdfViewer.Models
@using MudBlazor
@using System.Linq
@using System.IO

<div class="chart-container">
    @if (IsLoading)
    {
        <div class="loading-overlay">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="my-2">@ErrorMessage</MudAlert>
    }
    else if (AvailableDatasets != null && AvailableDatasets.Any())
    {
        <div class="dataset-selector">
            <MudText Typo="Typo.subtitle1">데이터셋 선택:</MudText>
            <div class="dataset-toggles">
                @foreach (var dataset in AvailableDatasets)
                {
                    var isActive = ActiveDatasets.Contains(dataset.Path);
                    <MudChip T="string" Color="@GetDatasetMudColor(dataset.Path)"
                           Variant="@(isActive ? Variant.Filled : Variant.Outlined)"
                           OnClick="@(() => ToggleDataset(dataset.Path))">
                        @GetDatasetDisplayName(dataset)
                    </MudChip>
                }
            </div>
        </div>

        <MudPaper Class="chart-area py-2" Elevation="0">
            <MudChart ChartType="ChartType.Line"
                    ChartSeries="@LineSeries"
                    XAxisLabels="@Labels"
                    Width="100%" Height="350px"
                    ChartOptions="new ChartOptions {
                        InterpolationOption = InterpolationOption.Straight
                        }"/>
        </MudPaper>

        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2 px-2">
            활성 데이터셋: @ActiveDatasets.Count / @AvailableDatasets.Count | 최대 포인트 수: @MaxDataPoints
        </MudText>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            선택된 그룹에 차트로 표시할 수 있는 숫자 데이터셋이 없습니다.
        </MudAlert>
    }
</div>

@code {
    [Parameter]
    public Hdf5Node SelectedNode { get; set; } = null!;

    private bool IsLoading = false;
    private string ErrorMessage = "";
    private readonly int MaxDataPoints = 1000; // 1000으로 고정
    private List<Hdf5Dataset> AvailableDatasets = new();
    private HashSet<string> ActiveDatasets = new();
    private Dictionary<string, List<double>> DatasetValues = new();
    private string[] Labels = Array.Empty<string>();

    // 라인 차트 시리즈 데이터
    private List<ChartSeries> LineSeries = new();

    // 색상 매핑
    private readonly Color[] MudColors = new[] {
        Color.Primary, Color.Secondary, Color.Success, Color.Warning,
        Color.Error, Color.Info, Color.Dark
    };

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedNode != null)
        {
            ActiveDatasets.Clear();
            DatasetValues.Clear();
            await LoadAvailableDatasetsAsync();
        }
    }

    private async Task LoadAvailableDatasetsAsync()
    {
        if (SelectedNode == null)
            return;

        try
        {
            IsLoading = true;
            ErrorMessage = "";
            StateHasChanged();

            await Task.Run(async () => {
                // 현재 그룹의 직접적인 데이터셋만 찾기
                var datasets = FindDirectDatasets(SelectedNode);

                // 숫자 데이터를 포함하는 데이터셋만 필터링
                AvailableDatasets = FilterNumericDatasets(datasets);

                if (!AvailableDatasets.Any())
                    return;

                // 모든 데이터셋을 로드하되, 첫 번째 데이터셋만 활성화
                string firstDatasetPath = AvailableDatasets.First().Path;
                ActiveDatasets.Add(firstDatasetPath);

                // 모든 데이터셋의 값을 미리 로드
                foreach (var dataset in AvailableDatasets)
                {
                    var dataArray = dataset.GetDataArray();
                    if (dataArray != null)
                    {
                        DatasetValues[dataset.Path] = ConvertToNumericList(dataArray, MaxDataPoints);
                    }
                }

                // 차트 업데이트
                await UpdateChartSeriesAsync();
            });
        }
        catch (Exception ex)
        {
            ErrorMessage = $"데이터셋 로딩 중 오류 발생: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetDatasetDisplayName(Hdf5Dataset dataset)
    {
        if (string.IsNullOrEmpty(dataset.Path))
            return "Unknown";

        return Path.GetFileName(dataset.Path);
    }

    private Color GetDatasetMudColor(string datasetPath)
    {
        // 일관된 색상 매핑을 위해 인덱스 계산
        int index = AvailableDatasets.FindIndex(d => d.Path == datasetPath);
        return MudColors[index % MudColors.Length];
    }

    private async Task ToggleDataset(string datasetPath)
    {
        // 데이터셋 활성/비활성 토글
        if (ActiveDatasets.Contains(datasetPath))
        {
            // 마지막 항목은 비활성화하지 않음 (최소 하나는 표시)
            if (ActiveDatasets.Count > 1)
            {
                ActiveDatasets.Remove(datasetPath);
            }
        }
        else
        {
            ActiveDatasets.Add(datasetPath);
        }

        // 차트 업데이트
        await UpdateChartSeriesAsync();
    }

    private async Task UpdateChartSeriesAsync()
    {
        try
        {
            LineSeries = new List<ChartSeries>();

            // 최대 데이터 길이 찾기 (X축 라벨 생성용)
            int maxDataLength = 0;
            foreach (var datasetPath in ActiveDatasets)
            {
                if (DatasetValues.TryGetValue(datasetPath, out var values))
                {
                    maxDataLength = Math.Max(maxDataLength, values.Count);
                }
            }

            // 라벨 생성
            GenerateLabels(maxDataLength);

            // 활성화된 데이터셋만 차트 시리즈에 추가
            foreach (var datasetPath in ActiveDatasets)
            {
                if (DatasetValues.TryGetValue(datasetPath, out var values))
                {
                    var dataset = AvailableDatasets.FirstOrDefault(d => d.Path == datasetPath);
                    if (dataset != null)
                    {
                        LineSeries.Add(new ChartSeries
                        {
                            Name = GetDatasetDisplayName(dataset),
                            Data = values.ToArray()
                        });
                    }
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"차트 업데이트 중 오류 발생: {ex.Message}";
        }
    }

    // 선택된 노드에서 직접적인 데이터셋만 찾기
    private List<Hdf5Dataset> FindDirectDatasets(Hdf5Node node)
    {
        var datasets = new List<Hdf5Dataset>();

        if (node == null)
            return datasets;

        // 현재 노드가 그룹인 경우, 직접적인 자식 중 데이터셋만 찾기
        if (node is Hdf5Group group)
        {
            foreach (var child in group.Children)
            {
                if (child is Hdf5Dataset dataset)
                {
                    datasets.Add(dataset);
                }
            }
        }
        // 현재 노드가 데이터셋인 경우, 해당 데이터셋만 추가
        else if (node is Hdf5Dataset singleDataset)
        {
            datasets.Add(singleDataset);
        }

        return datasets;
    }

    // 숫자 데이터를 포함하는 데이터셋만 필터링
    private List<Hdf5Dataset> FilterNumericDatasets(List<Hdf5Dataset> datasets)
    {
        var numericDatasets = new List<Hdf5Dataset>();

        foreach (var dataset in datasets)
        {
            // HDF5 숫자 데이터 타입 확인
            bool isNumericType = IsNumericDataType(dataset.DataType);

            if (isNumericType && dataset.GetDataArray() != null)
            {
                var array = dataset.GetDataArray();

                // 배열이 비어있지 않고 숫자 데이터를 포함하는지 확인
                if (array != null && array.Length > 0)
                {
                    // 샘플 값을 추출하여 숫자로 변환 가능한지 확인
                    var sampleValue = array.GetValue(0);
                    if (sampleValue != null && CanConvertToNumber(sampleValue))
                    {
                        numericDatasets.Add(dataset);
                    }
                }
            }
        }

        return numericDatasets;
    }

    // 숫자 데이터 타입인지 확인 (실제 HDF5 라이브러리의 타입 상수를 사용해야 함)
    private bool IsNumericDataType(byte dataType)
    {
        // 아래는 HDF5 숫자 데이터 타입의 예시 값
        // 실제 구현에서는 라이브러리의 상수를 사용해야 함
        byte[] numericTypes = { 0, 1, 2, 3, 4, 5, 6 }; // int8, int16, int32, int64, float, double 등

        return numericTypes.Contains(dataType);
    }

    // 값을 숫자로 변환할 수 있는지 확인
    private bool CanConvertToNumber(object value)
    {
        if (value == null)
            return false;

        string strValue = value.ToString();

        return double.TryParse(strValue, out _);
    }

    // 배열을 숫자 리스트로 변환하고 다운샘플링 적용
    private List<double> ConvertToNumericList(Array array, int maxPoints)
    {
        var result = new List<double>();

        if (array == null || array.Length == 0)
            return result;

        // 각 요소를 숫자로 변환하여 리스트에 추가
        var numericValues = new List<double>();
        foreach (var item in array)
        {
            if (item != null && double.TryParse(item.ToString(), out double value))
            {
                numericValues.Add(value);
            }
        }

        // 다운샘플링 적용
        if (maxPoints <= 0 || numericValues.Count <= maxPoints)
        {
            return numericValues;
        }

        // 균등 간격 샘플링
        double step = (double)numericValues.Count / maxPoints;
        for (int i = 0; i < maxPoints; i++)
        {
            int index = (int)Math.Floor(i * step);
            result.Add(numericValues[Math.Min(index, numericValues.Count - 1)]);
        }

        return result;
    }

    // 라벨 생성
    private void GenerateLabels(int dataLength)
    {
        if (dataLength == 0)
        {
            Labels = Array.Empty<string>();
            return;
        }

        // 데이터 포인트 수에 따라 적절한 수의 라벨 생성
        int labelCount = Math.Min(10, dataLength);
        if (labelCount <= 1)
        {
            Labels = new[] { "0" };
            return;
        }

        // 균등 간격으로 라벨 생성
        var labels = new string[labelCount];
        double step = (double)(dataLength - 1) / (labelCount - 1);

        for (int i = 0; i < labelCount; i++)
        {
            int index = (int)Math.Round(i * step);
            labels[i] = index.ToString();
        }

        Labels = labels;
    }
}
