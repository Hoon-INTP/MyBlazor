@using MyHdfViewer.Models
@using MudBlazor
@using System.Linq
@using System.IO

<div class="chart-container">
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="my-2">@ErrorMessage</MudAlert>
    }
    else if (AvailableDatasets != null && AvailableDatasets.Any())
    {
        <div class="dataset-selector">
            <MudText Typo="Typo.subtitle1">�����ͼ� ����:</MudText>
            <div class="dataset-toggles">
                @foreach (var dataset in AvailableDatasets)
                {
                    var isActive = ActiveDatasets.Contains(dataset.Path);
                    <MudChip T="string" Color="@GetDatasetMudColor(dataset.Path)"
                           Variant="@(isActive ? Variant.Filled : Variant.Outlined)"
                           OnClick="@(() => ToggleDataset(dataset.Path))">
                        @GetDatasetDisplayName(dataset)
                    </MudChip>
                }
            </div>
        </div>

        <MudPaper Class="chart-area py-2" Elevation="0">
            <MudChart ChartType="ChartType.Line"
                    ChartSeries="@LineSeries"
                    XAxisLabels="@Labels"
                    Width="100%" Height="350px"
                    ChartOptions="@LineChartOption"/>
        </MudPaper>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            No DataSet in Selected Group
        </MudAlert>
    }
</div>

@code {
    [Parameter]
    public Hdf5Node SelectedNode { get; set; } = null!;
    private Hdf5Node? oldSelectedNode;

    private bool DoRender = true;

    private string ErrorMessage = "";
    private readonly int MaxDataPoints = 1000;
    private List<Hdf5Dataset> AvailableDatasets = new();
    private HashSet<string> ActiveDatasets = new();
    private Dictionary<string, List<double>> DatasetValues = new();
    private string[] Labels = Array.Empty<string>();
    private readonly ChartOptions LineChartOption = new();

    private List<ChartSeries> LineSeries = new();

    private readonly Color[] MudColors = new[] {
        Color.Primary, Color.Secondary, Color.Success, Color.Warning,
        Color.Error, Color.Info, Color.Dark
    };

    protected override void OnInitialized()
    {
        LineChartOption.YAxisTicks = 5;
        LineChartOption.InterpolationOption = InterpolationOption.Straight;

        StateHasChanged();
    }

    private bool _isFirstRender = true;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedNode != null && (SelectedNode != oldSelectedNode || _isFirstRender))
        {
            DoRender = true;

            oldSelectedNode = SelectedNode;
            _isFirstRender = false;

            ActiveDatasets.Clear();
            DatasetValues.Clear();
            await LoadAvailableDatasetsAsync();
        }

        await base.OnParametersSetAsync();
    }

    private async Task LoadAvailableDatasetsAsync()
    {
        if (SelectedNode == null)
            return;

        try
        {
            ErrorMessage = "";
            StateHasChanged();

            await Task.Run(async () => {
                var datasets = FindDirectDatasets(SelectedNode);

                AvailableDatasets = FilterNumericDatasets(datasets);

                if (!AvailableDatasets.Any())
                    return;

                string firstDatasetPath = AvailableDatasets.First().Path;
                ActiveDatasets.Add(firstDatasetPath);

                foreach (var dataset in AvailableDatasets)
                {
                    var dataArray = dataset.GetDataArray();
                    if (dataArray != null)
                    {
                        DatasetValues[dataset.Path] = ConvertToNumericList(dataArray, MaxDataPoints);
                    }
                }

                // ��Ʈ ������Ʈ
                await UpdateChartSeriesAsync();
            });
        }
        catch (Exception ex)
        {
            ErrorMessage = $"�����ͼ� �ε� �� ���� �߻�: {ex.Message}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
            DoRender = false;
        }
    }

    private string GetDatasetDisplayName(Hdf5Dataset dataset)
    {
        if (string.IsNullOrEmpty(dataset.Path))
            return "Unknown";

        return Path.GetFileName(dataset.Path);
    }

    private Color GetDatasetMudColor(string datasetPath)
    {
        int index = AvailableDatasets.FindIndex(d => d.Path == datasetPath);
        return MudColors[index % MudColors.Length];
    }

    private async Task ToggleDataset(string datasetPath)
    {
        DoRender = true;

        if (ActiveDatasets.Contains(datasetPath))
        {
            if (ActiveDatasets.Count > 1)
            {
                ActiveDatasets.Remove(datasetPath);
            }
        }
        else
        {
            ActiveDatasets.Add(datasetPath);
        }

        await UpdateChartSeriesAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateChartSeriesAsync()
    {
        try
        {
            LineSeries = new List<ChartSeries>();

            int maxDataLength = 0;
            foreach (var datasetPath in ActiveDatasets)
            {
                if (DatasetValues.TryGetValue(datasetPath, out var values))
                {
                    maxDataLength = Math.Max(maxDataLength, values.Count);
                }
            }

            GenerateLabels(maxDataLength);

            foreach (var datasetPath in ActiveDatasets)
            {
                if (DatasetValues.TryGetValue(datasetPath, out var values))
                {
                    var dataset = AvailableDatasets.FirstOrDefault(d => d.Path == datasetPath);
                    if (dataset != null)
                    {
                        LineSeries.Add(new ChartSeries
                        {
                            Name = GetDatasetDisplayName(dataset),
                            Data = values.ToArray()
                        });
                    }
                }
            }

            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"��Ʈ ������Ʈ �� ���� �߻�: {ex.Message}";
        }
    }

    private List<Hdf5Dataset> FindDirectDatasets(Hdf5Node node)
    {
        var datasets = new List<Hdf5Dataset>();

        if (node == null)
            return datasets;

        if (node is Hdf5Group group)
        {
            foreach (var child in group.Children)
            {
                if (child is Hdf5Dataset dataset)
                {
                    datasets.Add(dataset);
                }
            }
        }
        else if (node is Hdf5Dataset singleDataset)
        {
            datasets.Add(singleDataset);
        }

        return datasets;
    }

    private List<Hdf5Dataset> FilterNumericDatasets(List<Hdf5Dataset> datasets)
    {
        var numericDatasets = new List<Hdf5Dataset>();

        foreach (var dataset in datasets)
        {
            bool isNumericType = IsNumericDataType(dataset.DataType);

            if (isNumericType && dataset.GetDataArray() != null)
            {
                var array = dataset.GetDataArray();

                if (array != null && array.Length > 0)
                {
                    var sampleValue = array.GetValue(0);
                    if (sampleValue != null && CanConvertToNumber(sampleValue))
                    {
                        numericDatasets.Add(dataset);
                    }
                }
            }
        }

        return numericDatasets;
    }

    private bool IsNumericDataType(byte dataType)
    {
        byte[] numericTypes = { 0, 1, 2, 3, 4, 5, 6 }; // int8, int16, int32, int64, float, double ��

        return numericTypes.Contains(dataType);
    }

    private bool CanConvertToNumber(object value)
    {
        if (value == null)
            return false;

        string strValue = value.ToString();

        return double.TryParse(strValue, out _);
    }

    private List<double> ConvertToNumericList(Array array, int maxPoints)
    {
        var result = new List<double>();

        if (array == null || array.Length == 0)
            return result;

        var numericValues = new List<double>();
        foreach (var item in array)
        {
            if (item != null && double.TryParse(item.ToString(), out double value))
            {
                numericValues.Add(value);
            }
        }

        if (maxPoints <= 0 || numericValues.Count <= maxPoints)
        {
            return numericValues;
        }

        double step = (double)numericValues.Count / maxPoints;
        for (int i = 0; i < maxPoints; i++)
        {
            int index = (int)Math.Floor(i * step);
            result.Add(numericValues[Math.Min(index, numericValues.Count - 1)]);
        }

        return result;
    }

    private void GenerateLabels(int dataLength)
    {
        if (dataLength == 0)
        {
            Labels = Array.Empty<string>();
            return;
        }

        int labelCount = dataLength;
        if (labelCount <= 1)
        {
            Labels = new[] { "0" };
            return;
        }

        var labels = new string[labelCount];
        double step = (double)(dataLength - 1) / (labelCount - 1);

        for (int i = 0; i < labelCount; i++)
        {
            int index = (int)Math.Round(i * step);
            labels[i] = index.ToString();
        }

        Labels = labels;
    }

    protected override bool ShouldRender()
    {
        return DoRender || _lastRenderedNode != SelectedNode;
    }

    private Hdf5Node _lastRenderedNode;

    protected override void OnAfterRender(bool firstRender)
    {
        _lastRenderedNode = SelectedNode;
        DoRender = false;
        base.OnAfterRender(firstRender);
    }
}
