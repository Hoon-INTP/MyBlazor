@using MyHdfViewer.Models
@using Microsoft.FluentUI.AspNetCore.Components

@if (IsLoading)
{
    <div class="loading-container">
        <FluentProgressRing />
    </div>
}
else if (Node is Hdf5Dataset dataset)
{
    <div style="margin-top: 1rem;">
        <p>
            <strong>Path:</strong>
            @dataset.Path
        </p>

        @if (GridItems != null && GridItems.Any())
        {
            <FluentDataGrid Items="@GridItems" GridTemplateColumns="1fr 1fr" Class="hdf5-data-grid">
                <PropertyColumn Property="@(item => item.Value)" Title="Value" />
            </FluentDataGrid>
        }
        else
        {
            <p>No Data</p>
        }
    </div>
}
else if (Node is Hdf5Group group)
{
    <div style="margin-top: 1rem;">
        <p>
            <strong>Group Path:</strong>
            @group.Path
        </p>

        @if (group.Children.Any())
        {
            <div>
                <p><strong>Datasets in Group</strong></p>

                @if (datasets != null && datasets.Any() && dataValues != null)
                {
                    <FluentDataGrid Items="@dataValues" Class="hdf5-data-grid">
                        @foreach (var dataset in datasets)
                        {
                            <PropertyColumn Property="@(item => item.Values[dataset.Name])" Title="@dataset.Name" Tooltip="true" />
                        }
                    </FluentDataGrid>
                }
                else if (datasets != null && datasets.Any() && dataValues == null)
                {
                    <p>No datasets with data found</p>
                }
                else
                {
                    <p>No datasets in this group</p>
                }
            </div>
        }
        else
        {
            <p>No datasets in this group</p>
        }
    </div>
}

@code
{
    [Parameter]
    public Hdf5Node Node { get; set; } = null!;

    private Hdf5Node? oldNode;

    private bool IsLoading = false;

    private record DataItem(int Index, string Value);
    private IQueryable<DataItem>? GridItems => GetGridItems();

    private record DatasetInfo(string Name, Hdf5Dataset Dataset);
    private List<DatasetInfo>? datasets;

    private record DataRowItem(int RowIndex, Dictionary<string, string> Values);
    private IQueryable<DataRowItem>? dataValues;

    private IQueryable<DataItem>? GetGridItems()
    {
        if (Node is not Hdf5Dataset dataset || dataset.Data == null)
        {
            return null;
        }

        var items = new List<DataItem>();
        var dataArray = dataset.GetDataArray();

        if (dataArray == null)
        {
            return null;
        }

        if (dataArray.Rank == 1)
        {
            for (int i = 0; i < dataArray.Length; i++)
            {
                var value = dataArray.GetValue(i);
                items.Add(new DataItem(i, value?.ToString() ?? "null"));
            }
        }
        else if (dataArray.Rank > 1)
        {
            if (dataArray.Rank == 2)
            {
                return Get2DGridItems(dataArray);
            }

            int index = 0;
            foreach (var item in dataArray)
            {
                items.Add(new DataItem(index++, item?.ToString() ?? "null"));
            }
        }

        return items.AsQueryable();
    }

    private IQueryable<DataItem>? Get2DGridItems(Array dataArray)
    {
        var items = new List<DataItem>();
        int rows = dataArray.GetLength(0);
        int cols = dataArray.GetLength(1);

        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                var value = dataArray.GetValue(i, j);
                items.Add(new DataItem(i * cols + j, $"[{i},{j}]: {value?.ToString() ?? "null"}"));
            }
        }

        return items.AsQueryable();
    }

    private async Task<List<DatasetInfo>> GetGroupDatasetsAsync()
    {
        var result = new List<DatasetInfo>();

        if (Node is Hdf5Group group)
        {
            await Task.Run(() =>
            {
                foreach (var child in group.Children)
                {
                    if (child is Hdf5Dataset dataset)
                    {
                        result.Add(new DatasetInfo(dataset.Name, dataset));
                    }
                }
            });
        }

        return result;
    }

    private async Task<IQueryable<DataRowItem>?> GetGroupDataValuesAsync()
    {
        if (Node is not Hdf5Group group)
        {
            return null;
        }

        if (datasets == null || !datasets.Any())
        {
            return null;
        }

        return await Task.Run(() =>
        {
            int maxRows = 0;
            foreach (var datasetInfo in datasets)
            {
                var dataset = datasetInfo.Dataset;
                if (dataset.Data != null)
                {
                    var dataArray = dataset.GetDataArray();
                    if (dataArray != null)
                    {
                        maxRows = Math.Max(maxRows, dataArray.Length);
                    }
                }
            }

            if (maxRows == 0)
            {
                return null;
            }

            var rows = new List<DataRowItem>();
            for (int i = 0; i < maxRows; i++)
            {
                var values = new Dictionary<string, string>();

                foreach (var datasetInfo in datasets)
                {
                    var dataset = datasetInfo.Dataset;
                    string value = "N/A";

                    if (dataset.Data != null)
                    {
                        var dataArray = dataset.GetDataArray();
                        if (dataArray != null && i < dataArray.Length)
                        {
                            var dataValue = dataArray.GetValue(i);
                            value = dataValue?.ToString() ?? "null";
                        }
                    }

                    values[datasetInfo.Name] = value;
                }

                rows.Add(new DataRowItem(i, values));
            }

            return rows.AsQueryable();
        });
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Node != oldNode)
        {
            try
            {
                IsLoading = true;
                StateHasChanged();

                datasets = null;
                dataValues = null;
                oldNode = Node;

                if (Node is Hdf5Group)
                {
                    datasets = await GetGroupDatasetsAsync();
                    dataValues = await GetGroupDataValuesAsync();
                }
            }
            finally
            {
                IsLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}
