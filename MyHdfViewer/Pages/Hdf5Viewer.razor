@page "/hdf5-viewer"

@using MyHdfViewer.Models
@using MyHdfViewer.Services
@using System.IO
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.FluentUI.AspNetCore.Components
@using MyHdfViewer.Components.TreeView

@inject IHdf5FileReader Hdf5Reader

<h3>HDF5 파일 뷰어</h3>

<FluentDivider Style="height: 100%;" Role="DividerRole.Separator" Orientation="Orientation.Horizontal"></FluentDivider>

<div class="row mt-3">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>파일 선택</h5>
            </div>
            <div class="card-body">
                <InputFile OnChange="@LoadFile1" accept=".h5,.hdf5" multiple="false"/>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @errorMessage
                    </div>
                }

                @if (isLoading)
                {
                    <div class="spinner-border text-primary mt-3" role="status">
                        <span class="visually-hidden">로딩 중...</span>
                    </div>
                }

                @if(currFile != prevFile)
                {
                    Console.WriteLine($"File has Changed {prevFile?.Name} to {currFile?.Name}");
                    prevFile = currFile;
                }
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card-body">
                @if (fileModel != null)
                {
                    <Hdf5TreeView FileModel="@fileModel" SelectedNode="@selectedNode" OnNodeSelected="@SelectNode" />
                }
                else{
                    <div class="alert alert-info mt-3">
                        <p>Select File first.</p>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <div class="card-body">
                @if (selectedNode != null)
                {
                    <Hdf5NodeAttrView Node="@selectedNode" />
                }
                else{
                    <div class="alert alert-info mt-3">
                        <p>Select a node first.</p>
                    </div>
                }
            </div>
        </div>
    </div>

</div>

@code {
    private Hdf5FileModel? fileModel;
    private Hdf5Node? selectedNode;
    private string? errorMessage;
    private bool isLoading;
    private IBrowserFile? currFile;
    private IBrowserFile? prevFile;


    private void LoadFile(InputFileChangeEventArgs e)
    {
        currFile = e.File;
    }

    private async Task LoadFile1(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var file = e.File;

            if (file == null)
            {
                errorMessage = "Select a file first.";
                return;
            }

            if (!file.Name.EndsWith(".h5") && !file.Name.EndsWith(".hdf5"))
            {
                errorMessage = "Invalid file format. Please select an HDF5 file.";
                return;
            }

            var stopwatch = Stopwatch.StartNew();

            using (var memoryStream = new MemoryStream())
            {
                using (var readStream = file.OpenReadStream(maxAllowedSize: 30 * 1024 * 1024))
                {
                    int chunkSize = 16 * 1024; //16KB
                    byte[] buffer = new byte[chunkSize];
                    int bytesRead;
                    long totalBytesRead = 0;

                    while ((bytesRead = await readStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    {
                        await memoryStream.WriteAsync(buffer, 0, bytesRead);
                        totalBytesRead += bytesRead;

                        if (totalBytesRead % (4 * chunkSize) == 0) // per 64KB (4chunks)
                        {
                            await Task.Delay(1);
                        }
                    }
                }

                memoryStream.Position = 0;

                stopwatch.Stop();

                Console.WriteLine($"File Loaded [Name: {file.Name}], [Size: {memoryStream.Length / 1024}KB], [Elapsed Time: {stopwatch.ElapsedMilliseconds}ms]");

                fileModel = Hdf5Reader.ReadHdf5FromStream(memoryStream, file.Name);
                selectedNode = fileModel.RootGroup;

                //Console.WriteLine($"{fileModel.PrintAllNodes(fileModel.RootGroup)}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error occurs during file loading: {ex.Message}";
            Console.Error.WriteLine(ex);
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectNode(Hdf5Node node)
    {
        selectedNode = node;
    }

    private void LoadDatasetData(Hdf5Dataset dataset)
    {
        if (!dataset.IsDataLoaded)
        {
            //Hdf5Reader.LoadDatasetData(dataset);
        }
    }

    private RenderFragment RenderNode(Hdf5Node node) => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "node");

        // 노드 자체를 렌더링
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "class", "node-label");
        builder.AddAttribute(4, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => SelectNode(node)));

        // 노드 타입에 따른 아이콘
        builder.OpenElement(5, "span");
        switch (node.NodeType)
        {
            case Hdf5NodeType.Group:
                builder.AddAttribute(6, "class", "oi oi-folder");
                break;
            case Hdf5NodeType.Dataset:
                builder.AddAttribute(6, "class", "oi oi-file");
                break;
            default:
                builder.AddAttribute(6, "class", "oi oi-question-mark");
                break;
        }
        builder.CloseElement(); // 아이콘 span

        builder.OpenElement(7, "span");
        builder.AddContent(8, $" {node.Name}");
        builder.CloseElement(); // 이름 span

        builder.CloseElement(); // node-label

        // 자식 노드가 있는 경우 재귀적으로 렌더링
        if (node is Hdf5Group group && group.Children.Any())
        {
            builder.OpenElement(9, "div");
            builder.AddAttribute(10, "class", "node-children");
            builder.AddAttribute(11, "style", "margin-left: 20px;");

            foreach (var child in group.Children)
            {
                builder.AddContent(12, RenderNode(child));
            }

            builder.CloseElement(); // node-children
        }

        builder.CloseElement(); // node
    };

    // 컴포넌트가 해제될 때 임시 파일 삭제
    public void Dispose()
    {
        //if (!string.IsNullOrEmpty(tempFilePath) && File.Exists(tempFilePath))
        {
            try
            {
                //File.Delete(tempFilePath);
            }
            catch
            {
                // 파일 삭제 실패 시 무시
            }
        }
    }
}
