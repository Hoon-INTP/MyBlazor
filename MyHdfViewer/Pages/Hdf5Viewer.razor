@page "/hdf5-viewer"

@using MyHdfViewer.Models
@using MyHdfViewer.Services
@using System.IO
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.FluentUI.AspNetCore.Components
@using MyHdfViewer.Components.TreeView
@using MyHdfViewer.Components.DataTable
@using MyHdfViewer.Components.DataChart

@inject IHdf5FileReader IHdf5Reader

<h3>HDF5 Viewer</h3>

<FluentDivider Style="width: 100%; margin-bottom: 0.5rem;" Role="DividerRole.Separator" Orientation="Orientation.Horizontal"></FluentDivider>

<FluentStack Orientation="Orientation.Vertical"
    HorizontalAlignment="HorizontalAlignment.Stretch"
    VerticalAlignment="VerticalAlignment.Center">

    <FluentCard>
        <FluentStack style="width: 100%; min-width: 800px;"
            Orientation="Orientation.Vertical"
            HorizontalAlignment="HorizontalAlignment.Stretch"
            VerticalAlignment="VerticalAlignment.Center">

            <FluentInputFile @ref="@selectedFileStream"
                AnchorId="MyUploadStream"
                DragDropZoneVisible="false"
                Mode="InputFileMode.Stream"
                Multiple="false"
                MaximumFileSize="@(20 * 1024 * 1024)"
                Accept=".h5, .hdf5"
                OnFileUploaded="@OnFileUploadedAsync"
                OnCompleted="@OnCompleted" />

            <FluentStack Orientation="Orientation.Horizontal"
                    HorizontalAlignment="HorizontalAlignment.Left"
                    VerticalAlignment="VerticalAlignment.Center"
                    HorizontalGap="30">

                <FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">Upload files</FluentButton>
                <FluentTextField @bind-Value=currFile ReadOnly="true" style="width: 100%;"></FluentTextField>
            </FluentStack>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }

            @if(currFile != prevFile)
            {
                Console.WriteLine($"File has Changed [{prevFile}] to [{currFile}]");
                prevFile = currFile;
            }

        </FluentStack>
    </FluentCard>

    <FluentStack Orientation="Orientation.Horizontal"
        HorizontalAlignment="HorizontalAlignment.Left"
        VerticalAlignment="VerticalAlignment.Top">
            @if (isLoading)
            {
                <div class="loading-container">
                    <FluentProgressRing />
                </div>
            }
            else
            {
                @if (fileModel != null)
                {
                    <FluentCard style="max-width: 300px; width: auto;">
                        <Hdf5TreeView FileModel="@fileModel" SelectedNode="@selectedNode" OnNodeSelected="@SelectNode" />
                    </FluentCard>
                }
                else
                {
                    <div class="alert alert-info mt-3">
                        <p>Select File first.</p>
                    </div>
                }

                @if (selectedNode != null)
                {
                    <FluentCard style="min-height: 300px;">
                        <div style="display: flex; width=100%">
                            <FluentButton id="BtnAttrShow" Appearance="Appearance.Outline" @onclick="() => visibleAttribute = !visibleAttribute">
                                Show Attribute
                            </FluentButton>

                            <FluentPopover Style="width: 100%;" AnchorId="BtnAttrShow" @bind-Open="visibleAttribute" AutoFocus="false">
                                <Body>
                                    <Hdf5NodeAttrView Node="@selectedNode" />
                                </Body>
                            </FluentPopover>
                        </div>

                        <FluentTabs>
                            <FluentTab Id="DataGrid">
                                <Header>
                                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Table())" />
                                    Data Grid
                                </Header>

                                <Content>
                                    <Hdf5DataTable Node="@selectedNode" />
                                </Content>
                            </FluentTab>

                             <FluentTab Id="DataChart">
                                <Header>
                                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.DataArea())"/>
                                    Data Chart
                                </Header>

                                <Content>
                                    <Hdf5DataChart CurrFile="@selectedFile" />
                                </Content>
                            </FluentTab>
                        </FluentTabs>
                    </FluentCard>
                }
                else
                {

                }
            }

        </FluentStack>
</FluentStack>

@code {
    private Hdf5FileModel? fileModel;
    private Hdf5Node? selectedNode;
    private Hdf5FileModel? selectedFile => fileModel;
    private string? errorMessage;
    private bool isLoading;

    private bool visibleAttribute;

    //private IBrowserFile? currFile; // For MemoryStream
    //private IBrowserFile? prevFile; // For MemoryStream

    private FluentInputFile? selectedFileStream = default!;
    private string? currFile = default!; // For temporary file
    private string? prevFile = default!; // For temporary file

    int? progressPercent;
    string? progressTitle;

    List<string> Files = new();


    private void LoadFile(InputFileChangeEventArgs e)
    {
        //currFile = e.File;
    }

    private async Task LoadFile1(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var file = e.File;

            if (file == null)
            {
                errorMessage = "Select a file first.";
                return;
            }

            if (!file.Name.EndsWith(".h5") && !file.Name.EndsWith(".hdf5"))
            {
                errorMessage = "Invalid file format. Please select an HDF5 file.";
                return;
            }

            var stopwatch = Stopwatch.StartNew();

            using (var memoryStream = new MemoryStream())
            {
                using (var readStream = file.OpenReadStream(maxAllowedSize: 30 * 1024 * 1024))
                {
                    int chunkSize = 16 * 1024; //16KB
                    byte[] buffer = new byte[chunkSize];
                    int bytesRead;
                    long totalBytesRead = 0;

                    while ((bytesRead = await readStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    {
                        await memoryStream.WriteAsync(buffer, 0, bytesRead);
                        totalBytesRead += bytesRead;

                        if (totalBytesRead % (4 * chunkSize) == 0) // per 64KB (4chunks)
                        {
                            await Task.Delay(1);
                        }
                    }
                }

                memoryStream.Position = 0;

                stopwatch.Stop();

                Console.WriteLine($"File Loaded [Name: {file.Name}], [Size: {memoryStream.Length / 1024}KB], [Elapsed Time: {stopwatch.ElapsedMilliseconds}ms]");

                fileModel = IHdf5Reader.ReadHdf5FromStream(memoryStream, file.Name);
                selectedNode = fileModel.RootGroup;

                //Console.WriteLine($"{fileModel.PrintAllNodes(fileModel.RootGroup)}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error occurs during file loading: {ex.Message}";
            Console.Error.WriteLine(ex);
            Console.WriteLine(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectNode(Hdf5Node node)
    {
        selectedNode = node;
    }

    private void LoadDatasetData(Hdf5Dataset dataset)
    {
        if (!dataset.IsDataLoaded)
        {
            //IHdf5Reader.LoadDatasetData(dataset);
        }
    }

    async Task OnFileUploadedAsync(FluentInputFileEventArgs file)
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            fileModel = null;
            selectedNode = null;

            var stopwatch = Stopwatch.StartNew();

            progressPercent = file.ProgressPercent;
            progressTitle = file.ProgressTitle;

            if (!file.Name.EndsWith(".h5") && !file.Name.EndsWith(".hdf5"))
            {
                errorMessage = "Invalid file format. Please select an HDF5 file.";
                return;
            }

            var localFile = Path.GetTempFileName() + file.Name;

            currFile = file.Name;

            Files.Add(localFile);

            Console.WriteLine($"Temp File path : [{localFile}]");

            await using FileStream fs = new(localFile, FileMode.Create);
            await file.Stream!.CopyToAsync(fs);
            await file.Stream!.DisposeAsync();

            stopwatch.Stop();

            fileModel = IHdf5Reader.ReadHdf5FromTempFile(localFile, currFile);
            selectedNode = fileModel.RootGroup;

            Console.WriteLine($"File Loaded [Name: {currFile}], [Size: {file.Size / 1024}KB], [Elapsed Time: {stopwatch.ElapsedMilliseconds}ms]");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error occurs during file loading: {ex.Message}";
            Console.Error.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    void OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        progressPercent = selectedFileStream!.ProgressPercent;
        progressTitle = selectedFileStream!.ProgressTitle;

        foreach (var file in Files)
        {
            File.Delete(file);
        }
    }
}
