@page "/hdf5-viewer"
@using MyHdfViewer.Models
@using MyHdfViewer.Services
@using System.IO
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Forms

@inject IHdf5FileReader Hdf5Reader

<h3>HDF5 파일 뷰어</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>파일 선택</h5>
            </div>
            <div class="card-body">
                <InputFile OnChange="@LoadFile" accept=".h5,.hdf5" multiple="false" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @errorMessage
                    </div>
                }

                @if (isLoading)
                {
                    <div class="spinner-border text-primary mt-3" role="status">
                        <span class="visually-hidden">로딩 중...</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (fileModel != null)
{
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>파일 구조</h5>
                </div>
                <div class="card-body">
                    <p><strong>파일명:</strong> @fileModel.FileName</p>

                    <div class="hdf5-tree">
                        @RenderNode(fileModel.RootGroup)
                    </div>
                </div>
            </div>
        </div>

        @if (selectedNode != null)
        {
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>노드 정보</h5>
                    </div>
                    <div class="card-body">
                        <h6>@selectedNode.Name</h6>

                        @if (selectedNode is Hdf5Dataset dataset)
                        {
                            <p><strong>Type:</strong> @dataset.DataType</p>
                            <p><strong>Rank:</strong> @(dataset.Dimensions.Length.ToString())</p>
                            <p><strong>Size:</strong> @(string.Join(" x ", dataset.Dimensions))</p>

                            @if (dataset.Data != null)
                            {
                                <p><strong>데이터 미리보기:</strong></p>
                                <pre>
                                    @foreach (var data in dataset.GetDataArray())
                                    {
                                        @(data + "\n")
                                    }
                                </pre>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-primary" @onclick="() => LoadDatasetData(dataset)">데이터 로드</button>
                            }
                        }

                        @if (selectedNode.Attributes.Any())
                        {
                            <h6 class="mt-4">속성</h6>
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>이름</th>
                                        <th>값</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var attr in selectedNode.Attributes)
                                    {
                                        <tr>
                                            <td>@attr.Name</td>
                                            <td>@attr.Value</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}


@code {
    private Hdf5FileModel? fileModel;
    private Hdf5Node? selectedNode;
    private string? errorMessage;
    private bool isLoading;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var file = e.File;

            if (file == null)
            {
                errorMessage = "Select a file first.";
                return;
            }

            if (!file.Name.EndsWith(".h5") && !file.Name.EndsWith(".hdf5"))
            {
                errorMessage = "Invalid file format. Please select an HDF5 file.";
                return;
            }

            var stopwatch = Stopwatch.StartNew();

            using (var memoryStream = new MemoryStream())
            {
                using (var readStream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024))
                {
                    int chunkSize = 16 * 1024; //16KB
                    byte[] buffer = new byte[chunkSize];
                    int bytesRead;
                    long totalBytesRead = 0;

                    while ((bytesRead = await readStream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    {
                        await memoryStream.WriteAsync(buffer, 0, bytesRead);
                        totalBytesRead += bytesRead;

                        if (totalBytesRead % (4 * chunkSize) == 0) // per 64KB (4chunks)
                        {
                            await Task.Delay(1);
                        }
                    }
                }

                memoryStream.Position = 0;

                stopwatch.Stop();

                Console.WriteLine($"File Loaded [Name: {file.Name}], [Size: {memoryStream.Length / 1024}KB], [Elapsed Time: {stopwatch.ElapsedMilliseconds}ms]");

                fileModel = Hdf5Reader.ReadHdf5FromStream(memoryStream, file.Name);
                selectedNode = fileModel.RootGroup;

                //Console.WriteLine($"{fileModel.PrintAllNodes(fileModel.RootGroup)}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error occurs during file loading: {ex.Message}";
            Console.Error.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectNode(Hdf5Node node)
    {
        selectedNode = node;
    }

    private void LoadDatasetData(Hdf5Dataset dataset)
    {
        if (!dataset.IsDataLoaded)
        {
            //Hdf5Reader.LoadDatasetData(dataset);
        }
    }

    private RenderFragment RenderNode(Hdf5Node node) => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "node");

        // 노드 자체를 렌더링
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "class", "node-label");
        builder.AddAttribute(4, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => SelectNode(node)));

        // 노드 타입에 따른 아이콘
        builder.OpenElement(5, "span");
        switch (node.NodeType)
        {
            case Hdf5NodeType.Group:
                builder.AddAttribute(6, "class", "oi oi-folder");
                break;
            case Hdf5NodeType.Dataset:
                builder.AddAttribute(6, "class", "oi oi-file");
                break;
            default:
                builder.AddAttribute(6, "class", "oi oi-question-mark");
                break;
        }
        builder.CloseElement(); // 아이콘 span

        builder.OpenElement(7, "span");
        builder.AddContent(8, $" {node.Name}");
        builder.CloseElement(); // 이름 span

        builder.CloseElement(); // node-label

        // 자식 노드가 있는 경우 재귀적으로 렌더링
        if (node is Hdf5Group group && group.Children.Any())
        {
            builder.OpenElement(9, "div");
            builder.AddAttribute(10, "class", "node-children");
            builder.AddAttribute(11, "style", "margin-left: 20px;");

            foreach (var child in group.Children)
            {
                builder.AddContent(12, RenderNode(child));
            }

            builder.CloseElement(); // node-children
        }

        builder.CloseElement(); // node
    };

    // 컴포넌트가 해제될 때 임시 파일 삭제
    public void Dispose()
    {
        //if (!string.IsNullOrEmpty(tempFilePath) && File.Exists(tempFilePath))
        {
            try
            {
                //File.Delete(tempFilePath);
            }
            catch
            {
                // 파일 삭제 실패 시 무시
            }
        }
    }
}