@page "/hdf5-viewer"
@using MyHdfViewer.Models
@using MyHdfViewer.Services
@using MyHdfViewer.Utility
@using System.IO
@using Microsoft.AspNetCore.Components.Forms

@inject Hdf5FileReader Hdf5Reader

<h3>HDF5 파일 뷰어</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>파일 선택</h5>
            </div>
            <div class="card-body">
                <InputFile OnChange="LoadFile" accept=".h5,.hdf5" />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @errorMessage
                    </div>
                }
                
                @if (isLoading)
                {
                    <div class="spinner-border text-primary mt-3" role="status">
                        <span class="visually-hidden">로딩 중...</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (fileModel != null)
{
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>파일 구조</h5>
                </div>
                <div class="card-body">
                    <p><strong>파일명:</strong> @fileModel.FileName</p>
                    
                    <div class="hdf5-tree">
                        @RenderNode(fileModel.RootGroup)
                    </div>
                </div>
            </div>
        </div>
        
        @if (selectedNode != null)
        {
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5>노드 정보</h5>
                    </div>
                    <div class="card-body">
                        <h6>@selectedNode.Name</h6>
                        
                        @if (selectedNode is Hdf5Dataset dataset)
                        {
                            <p><strong>타입:</strong> @dataset.DataType</p>
                            <p><strong>차원:</strong> @string.Join(" x ", dataset.Dimensions)</p>
                            
                            @if (dataset.Data != null)
                            {
                                <p><strong>데이터 미리보기:</strong></p>
                                <pre>@dataset.Data.ToString()</pre>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-primary" @onclick="() => LoadDatasetData(dataset)">데이터 로드</button>
                            }
                        }
                        
                        @if (selectedNode.Attributes.Any())
                        {
                            <h6 class="mt-4">속성</h6>
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>이름</th>
                                        <th>값</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var attr in selectedNode.Attributes)
                                    {
                                        <tr>
                                            <td>@attr.Name</td>
                                            <td>@attr.Value</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {    
    private Hdf5FileModel? fileModel;
    private Hdf5Node? selectedNode;
    private string? errorMessage;
    private bool isLoading;
    private string? tempFilePath;
    
    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            var file = e.File;
            
            if (file == null)
            {
                errorMessage = "파일이 선택되지 않았습니다.";
                return;
            }
            
            if (!file.Name.EndsWith(".h5") && !file.Name.EndsWith(".hdf5"))
            {
                errorMessage = "HDF5 파일(.h5 또는 .hdf5)만 지원됩니다.";
                return;
            }
            
            // 임시 파일로 저장
            tempFilePath = await SaveTempFileAsync(file);

            Console.WriteLine($"Reading HDF5 file: {tempFilePath}");
            
            // HDF5 파일 읽기
            fileModel = Hdf5Reader.ReadFile(tempFilePath);
            
            // 파일 로드 후 루트 그룹 선택
            selectedNode = fileModel.RootGroup;
        }
        catch (Exception ex)
        {
            errorMessage = $"파일 로드 중 오류 발생: {ex.Message}";
            Console.Error.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    // 임시 파일 저장 - C# 네이티브 코드 사용
    private async Task<string> SaveTempFileAsync(IBrowserFile file)
    {
        // 임시 디렉토리 생성 (애플리케이션 실행 시 초기화되는 임시 폴더)
        var tempPath = Path.Combine(Path.GetTempPath(), "MyHdfViewer");
        Directory.CreateDirectory(tempPath);
        
        // 유니크한 파일명 생성
        var uniqueFileName = $"{Path.GetFileNameWithoutExtension(file.Name)}_{Guid.NewGuid():N}{Path.GetExtension(file.Name)}";
        var filePath = Path.Combine(tempPath, uniqueFileName);
        
        // 파일 저장
        using (var stream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024)) // 최대 100MB
        {
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await stream.CopyToAsync(fileStream);
            }
        }
        
        return filePath;
    }
    
    private void SelectNode(Hdf5Node node)
    {
        selectedNode = node;
    }
    
    private void LoadDatasetData(Hdf5Dataset dataset)
    {
        if (!dataset.IsDataLoaded)
        {
            Hdf5Reader.LoadDatasetData(dataset);
        }
    }
    
    private RenderFragment RenderNode(Hdf5Node node) => builder =>
    {
        //builder.OpenElement(0, "div");
        //builder.AddAttribute(1, "class", "node");
        //
        //// 노드 자체를 렌더링
        //builder.OpenElement(2, "div");
        //builder.AddAttribute(3, "class", "node-label");
        //builder.AddAttribute(4, "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, () => SelectNode(node)));
        //
        //// 노드 타입에 따른 아이콘
        //builder.OpenElement(5, "span");
        //switch (node.NodeType)
        //{
        //    case Hdf5NodeType.Group:
        //        builder.AddAttribute(6, "class", "oi oi-folder");
        //        break;
        //    case Hdf5NodeType.Dataset:
        //        builder.AddAttribute(6, "class", "oi oi-file");
        //        break;
        //    default:
        //        builder.AddAttribute(6, "class", "oi oi-question-mark");
        //        break;
        //}
        //builder.CloseElement(); // 아이콘 span
        //
        //builder.OpenElement(7, "span");
        //builder.AddContent(8, $" {node.Name}");
        //builder.CloseElement(); // 이름 span
        //
        //builder.CloseElement(); // node-label
        //
        //// 자식 노드가 있는 경우 재귀적으로 렌더링
        //if (node is Hdf5Group group && group.Children.Any())
        //{
        //    builder.OpenElement(9, "div");
        //    builder.AddAttribute(10, "class", "node-children");
        //    builder.AddAttribute(11, "style", "margin-left: 20px;");
        //    
        //    foreach (var child in group.Children)
        //    {
        //        builder.AddContent(12, RenderNode(child));
        //    }
        //    
        //    builder.CloseElement(); // node-children
        //}
        //
        //builder.CloseElement(); // node
    };
    
    // 컴포넌트가 해제될 때 임시 파일 삭제
    public void Dispose()
    {
        if (!string.IsNullOrEmpty(tempFilePath) && File.Exists(tempFilePath))
        {
            try
            {
                File.Delete(tempFilePath);
            }
            catch
            {
                // 파일 삭제 실패 시 무시
            }
        }
    }
}