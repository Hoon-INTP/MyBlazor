@page "/weather"
@inject HttpClient Http

<PageTitle>Fluent Weather</PageTitle>


@if (items == null)
{
    <em>Loading...</em>
}
else
{
    <FluentDataGrid Items="@items" GridTemplateColumns="1fr 1fr 1fr 1fr">
        <ChildContent>
            <PropertyColumn Property="@(p => p.Date)" Sortable="true" />
            <PropertyColumn Property="@(p => p.TemperatureC)" Sortable="true" />
            <PropertyColumn Property="@(p => p.TemperatureF)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Summary)" />
        </ChildContent>
    </FluentDataGrid>
}


@code {
    record Forecast(DateOnly Date, int TemperatureC, int TemperatureF, string Summary);

    IQueryable<Forecast>? items = Enumerable.Empty<Forecast>().AsQueryable();

    private IQueryable<Forecast> GenerateSampleGridData(int size)
    {
        Forecast[] data = new Forecast[size];

        for (int i = 0; i < size; i++)
        {
            data[i] = new Forecast(forecasts![i].Date, forecasts[i].TemperatureC, forecasts[i].TemperatureF, $"{forecasts[i].Summary}");
        }
        return data.AsQueryable();
    }

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");

        items = GenerateSampleGridData(forecasts!.Length);
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
