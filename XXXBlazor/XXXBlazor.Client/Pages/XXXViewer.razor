@page "/XXXViewer"
@rendermode InteractiveWebAssembly

@using System.IO
@using System.Threading
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Forms
@using System.Collections.Concurrent
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime

<PageTitle>XXXViewer</PageTitle>

<h1>XXXViewer</h1>

@if (!isJsInitialized)
{
    <div class="alert alert-info">
        <h6>JavaScript 초기화 중입니다...</h6>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p>@errorMessage</p>
            <button class="btn btn-sm btn-primary" @onclick="RetryInitialize">재시도</button>
        }
    </div>
}

<DxFileInput
          Enabled="@isJsInitialized"
          MaxFileSize="@MaxFileSize"
          FilesUploading="OnFilesUploading"
          AllowedFileExtensions="@(new List<string> { ".hdf5", ".h5" })"
          AllowMultiFileUpload="false"
          SelectedFilesChanged="@SelectedFilesChanged">
</DxFileInput>

@if (isLoading)
{
    <div>
        <h6>File is Loading!!! (@processedChunks/@totalChunks)</h6>
        <progress value="@processedChunks" max="@totalChunks"></progress>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage) && isJsInitialized)
{
    <div>
        <h6>@errorMessage</h6>
    </div>
}
else if (processedChunks > 0)
{
    <h6>File Load Done!!!</h6>
}

@code {
    private const int MaxFileSize = 15 * 1024 * 1024;

    private bool isLoading = false;
    private string? errorMessage = null;

    private int processedChunks = 0;
    private int totalChunks = 0;
    private DotNetObjectReference<XXXViewer>? dotNetObjectRef;
    private ConcurrentDictionary<int, byte[]> processedData = new ConcurrentDictionary<int, byte[]>();

    // JS 초기화 여부 추적
    private bool isJsInitialized = false;
    private int initializationAttempts = 0;
    private const int MAX_INITIALIZATION_ATTEMPTS = 3;

    int SelectedFilesCount { get; set; }

    // JavaScript 초기화를 OnAfterRenderAsync로 이동
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeJavaScript();
        }
    }

    private async Task InitializeJavaScript()
    {
        if (isJsInitialized || initializationAttempts >= MAX_INITIALIZATION_ATTEMPTS)
            return;

        try
        {
            initializationAttempts++;
            Console.WriteLine($"JavaScript 초기화 시도 {initializationAttempts}/{MAX_INITIALIZATION_ATTEMPTS}...");

            dotNetObjectRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initializeWorkers", dotNetObjectRef);

            // 초기화 확인
            var jsInlineCheck = await JSRuntime.InvokeAsync<bool>("window.hasOwnProperty", "processChunk");
            if (!jsInlineCheck)
            {
                throw new Exception("JavaScript 메서드가 제대로 초기화되지 않았습니다.");
            }

            isJsInitialized = true;
            errorMessage = null;
            Console.WriteLine("JavaScript 초기화 성공!");
        }
        catch (Exception ex)
        {
            errorMessage = $"JavaScript 초기화 오류 ({initializationAttempts}/{MAX_INITIALIZATION_ATTEMPTS}): {ex.Message}";
            Console.WriteLine($"JavaScript 초기화 오류: {ex}");

            if (initializationAttempts < MAX_INITIALIZATION_ATTEMPTS)
            {
                // 잠시 후 재시도
                await Task.Delay(1000);
                await InitializeJavaScript();
            }
        }
        finally
        {
            StateHasChanged();
        }
    }

    // 수동 초기화 재시도
    private async Task RetryInitialize()
    {
        initializationAttempts = 0;
        await InitializeJavaScript();
    }

    protected void SelectedFilesChanged(IEnumerable<UploadFileInfo> files)
    {
        SelectedFilesCount = files.ToList().Count();
        InvokeAsync(StateHasChanged);

        Console.WriteLine($"SelectedFilesChanged {SelectedFilesCount}");
    }

    protected async Task OnFilesUploading(FilesUploadingEventArgs args)
    {
        Console.WriteLine("File Upload Start");
        try
        {
            // JS가 초기화되지 않았다면 작업 중단
            if (!isJsInitialized)
            {
                errorMessage = "JavaScript가 아직 초기화되지 않았습니다. 잠시 후 다시 시도해주세요.";
                return;
            }

            errorMessage = null;
            isLoading = true;
            processedChunks = 0;
            processedData.Clear();
            StateHasChanged();

            var file = args.Files[0];

            if (file == null)
            {
                errorMessage = "Select a file first.";
                return;
            }

            if (!file.Name.EndsWith(".h5") && !file.Name.EndsWith(".hdf5"))
            {
                errorMessage = "Invalid file format. Please select an HDF5 file.";
                return;
            }

            // 파일 전체를 메모리 스트림에 복사
            byte[] fileData;
            using (var memoryStream = new MemoryStream())
            {
                using (var fileStream = file.OpenReadStream(maxAllowedSize: 500 * 1024 * 1024))
                {
                    await fileStream.CopyToAsync(memoryStream);
                }
                fileData = memoryStream.ToArray();
            }

            // 청크 처리 설정
            int chunkSize = 16 * 1024;
            long fileSize = fileData.Length;
            totalChunks = (int)Math.Ceiling((double)fileSize / chunkSize);

            var tasks = new List<Task>();

            int maxParallelism = Math.Max(1, Environment.ProcessorCount - 1);
            using var semaphore = new SemaphoreSlim(maxParallelism);

            for (int i = 0; i < totalChunks; i++)
            {
                int chunkIndex = i;
                long start = chunkIndex * chunkSize;
                long end = Math.Min(start + chunkSize, fileSize);

                tasks.Add(Task.Run(async () => {
                    try
                    {
                        await semaphore.WaitAsync();

                        // 메모리에서 직접 청크 추출
                        int length = (int)(end - start);
                        byte[] buffer = new byte[length];
                        Buffer.BlockCopy(fileData, (int)start, buffer, 0, length);

                        // JavaScript 워커에게 처리 요청
                        await JSRuntime.InvokeVoidAsync("processChunk", chunkIndex, buffer);
                    }
                    finally
                    {
                        semaphore.Release();
                    }
                }));
            }

            await Task.WhenAll(tasks);

            // 타임아웃 추가
            int timeoutSeconds = 30;
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(timeoutSeconds));

            try
            {
                while (processedChunks < totalChunks)
                {
                    if (cts.Token.IsCancellationRequested)
                        throw new TimeoutException($"처리 시간이 {timeoutSeconds}초를 초과했습니다.");

                    await Task.Delay(100, cts.Token);
                    if (processedChunks % 10 == 0)
                        StateHasChanged(); // 진행 상태 업데이트
                }
            }
            catch (TaskCanceledException)
            {
                throw new TimeoutException($"처리 시간이 {timeoutSeconds}초를 초과했습니다.");
            }

            byte[] completeData = CombineChunks();
            errorMessage = $"파일 '{file.Name}' ({fileSize:N0} 바이트)을 성공적으로 처리했습니다.";
        }
        catch (Exception exception)
        {
            errorMessage = $"Error occurs during file loading: {exception.Message}";
            Console.WriteLine($"Error during file processing: {exception}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void OnChunkProcessed(int chunkIndex, byte[] _processedData)
    {
        try
        {
            processedData[chunkIndex] = _processedData;
            processedChunks++;

            // UI 업데이트 줄이기 (10개 청크마다 업데이트)
            if (processedChunks % 10 == 0 || processedChunks == totalChunks)
            {
                InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"OnChunkProcessed 오류: {ex}");
        }
    }

    private byte[] CombineChunks()
    {
        int totalLength = processedData.Values.Sum(chunk => chunk.Length);
        byte[] result = new byte[totalLength];
        int offset = 0;

        foreach (var chunk in processedData.OrderBy(kvp => kvp.Key))
        {
            Buffer.BlockCopy(chunk.Value, 0, result, offset, chunk.Value.Length);
            offset += chunk.Value.Length;
        }

        return result;
    }

    public void Dispose()
    {
        try
        {
            if (isJsInitialized && dotNetObjectRef != null)
            {
                // 워커 정리 시도
                JSRuntime.InvokeVoidAsync("disposeWorkers");
            }
        }
        catch
        {
            // 정리 중 오류 무시
        }
        finally
        {
            dotNetObjectRef?.Dispose();
        }
    }
}
