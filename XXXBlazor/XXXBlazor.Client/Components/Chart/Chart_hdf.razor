@using System.Data
@using XXXBlazor.Client.Models
@using DevExpress.Blazor

@inherits Hdf5ChartBase

@* <div style="height: 40px;">
    <DxButton
        Text="Select Series"
        Click="@(() => isVisiblePopupSelectSeries = true)"
        Visible="(DisplayData != null && DisplayData.Rows.Count > 0)">
    </DxButton>
</div>

<DxPopup
    @bind-Visible="@isVisiblePopupSelectSeries"
    ShowFooter="true"
    HeaderText="Select Series">
    <BodyContentTemplate>
        @foreach(DataColumn col in DisplayData.Columns)
        {
            <DxCheckBox CheckType="CheckType.Switch"
                Checked="@ShowSeries[col.ColumnName]"
                CheckedChanged="@((bool t) => CheckedChanged(col.ColumnName, t))"
                Alignment="CheckBoxContentAlignment.Default">
                @col.ColumnName
            </DxCheckBox>
        }
    </BodyContentTemplate>

    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="@(() => isVisiblePopupSelectSeries = false)" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@(() => isVisiblePopupSelectSeries = false)" />
    </FooterContentTemplate>
</DxPopup> *@

@if ( null != DisplayData )
{
    <div>
        <DxChart @key="chartRenderKey" T="DataRow" Data="@DisplayData.AsEnumerable()" CssClass="chart-size">
            <DxChartAnimationSettings Enabled="false"></DxChartAnimationSettings>
            <DxChartZoomAndPanSettings ArgumentAxisZoomAndPanMode="ChartAxisZoomAndPanMode.Both" />
            @foreach (DataColumn col in DisplayData.Columns)
            {
                if( true == (DisplayLegendSetting.TryGetValue(col.ColumnName, out bool res) ? res : false) )
                {
                    <DxChartLineSeries
                        Visible="true"
                        T="DataRow"
                        TArgument="int"
                        TValue="object"
                        Name="@col.ColumnName"
                        ArgumentField="@(row => DisplayData.Rows.IndexOf(row) + 1)"
                        ValueField="@(row => GetDataValue(row, col))">
                    </DxChartLineSeries>
                }
            }

            <DxChartLegend
                Visible="@true"
                AllowToggleSeries="false"
                Orientation="Orientation.Vertical"
                Position="RelativePosition.Outside"
                HoverMode="ChartLegendHoverMode.None"
                HorizontalAlignment="HorizontalAlignment.Right" />
        </DxChart>
    </div>
}
