@using XXXBlazor.Client.Models
@using DevExpress.Blazor

<div>

    <DxCheckBox CheckType="CheckType.Switch"
                Checked="@ShowAttribute"
                CheckedChanged="@((bool t) => CheckedChanged(t))"
                Alignment="CheckBoxContentAlignment.Left">
                Show Attribute
    </DxCheckBox>

    @if (selectedNode == null)
    {
        <div>
            파일을 선택해주세요.
        </div>
    }
    else
    {
        @if(ShowAttribute)
        {
            @if (currentNode != null)
            {
                <div>
                    <br>
                    <h5>노드 정보</h5>
                    <div>
                        <p><strong>이름:</strong> @currentNode.Name</p>
                        <p><strong>경로:</strong> @currentNode.Path</p>
                        <p><strong>타입:</strong> @currentNode.NodeType</p>

                        @if (currentNode.NodeType == Hdf5NodeType.Dataset && currentNode.Dimensions != null)
                        {
                            <p><strong>차원:</strong> [@string.Join(", ", currentNode.Dimensions)]</p>
                            <p><strong>데이터 타입:</strong> @(currentNode.DataType?.Name ?? "Unknown")</p>

                            <div>
                                <h6>데이터 미리보기</h6>
                                @if (currentNode.Data != null)
                                {
                                    @if (currentNode.Data is string dataStr)
                                    {
                                        <p>@dataStr</p>
                                    }
                                    else if (currentNode.Data.GetType().IsArray)
                                    {
                                        <p>@GetArrayPreview(currentNode.Data)</p>
                                    }
                                    else
                                    {
                                        <p>@currentNode.Data.ToString()</p>
                                    }
                                }
                                else
                                {
                                    <p>데이터 없음</p>
                                }
                            </div>
                        }

                        @if (currentNode.Attributes != null && currentNode.Attributes.Any())
                        {
                            <div>
                                <h6>속성 (@currentNode.Attributes.Count)</h6>
                                <table>
                                    <thead>
                                        <tr>
                                            <th>이름</th>
                                            <th>값</th>
                                            <th>타입</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var attr in currentNode.Attributes)
                                        {
                                            <tr>
                                                <td><strong>@attr.Key</strong></td>
                                                <td>@FormatAttributeValue(attr.Value)</td>
                                                <td>@(attr.Value?.GetType().Name ?? "Unknown")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            }
        }

        <DxTreeView
            Data="@nodesList"
            SizeMode="SizeMode.Small"
            AllowSelectNodes="true"
            SelectionChanged="OnNodeSelected"
            ShowFilterPanel="true"
            FilterMinLength="2"
            FilterMode="NavigationFilterMode.EntireBranch">

            <DataMappings>
                <DxTreeViewDataMapping
                    Text="Name"
                    Children="Children"
                    Name="Path"/>
            </DataMappings>

        </DxTreeView>


    }
</div>

@code {
    [Parameter]
    public Hdf5TreeNode? selectedNode { get; set; }

    [Parameter]
    public EventCallback<Hdf5TreeNode> OnNodeClicked { get; set; }

    private Hdf5TreeNode? currentNode;

    // 트리뷰에 바인딩할 데이터 소스
    private List<Hdf5TreeNode> nodesList = new List<Hdf5TreeNode>();

    // 노드 경로를 키로 사용하는 딕셔너리
    private Dictionary<string, Hdf5TreeNode> nodePathMap = new Dictionary<string, Hdf5TreeNode>();

    private bool ShowAttribute = false;

    protected override void OnParametersSet()
    {
        //Console.WriteLine("OnParametersSet 호출됨");

        if (selectedNode != null)
        {
            //Console.WriteLine($"Root 노드: {selectedNode.Name}, {selectedNode.Path}");
            //Console.WriteLine($"자식 노드 수: {selectedNode.Children?.Count ?? 0}");

            if(nodesList.Count > 0)
            {
                nodesList.Clear();
            }

            nodesList.Add(PrepareNodeForTreeView(selectedNode));

            if (currentNode == null)
            {
                currentNode = selectedNode;
            }

            // 노드 맵 초기화
            if(nodePathMap.Count > 0)
            {
                nodePathMap.Clear();
            }

            BuildNodePathMap(selectedNode);

            //Console.WriteLine($"노드 맵 크기: {nodePathMap.Count}");
        }
        else
        {
            currentNode = null;
        }
    }

    private Hdf5TreeNode PrepareNodeForTreeView(Hdf5TreeNode node)
    {
        // DisplayName 속성을 동적으로 추가
        if (node.NodeType == Hdf5NodeType.Dataset && node.Dimensions != null)
        {
            node.GetType().GetProperty("DisplayName")?.SetValue(node, $"{node.Name} [{string.Join(", ", node.Dimensions)}]");
        }
        else if (node.NodeType == Hdf5NodeType.Group)
        {
            node.GetType().GetProperty("DisplayName")?.SetValue(node, $"{node.Name} (그룹)");
        }
        else
        {
            node.GetType().GetProperty("DisplayName")?.SetValue(node, node.Name);
        }

        return node;
    }

    // 노드 경로 맵 구축
    private void BuildNodePathMap(Hdf5TreeNode node)
    {
        if (node == null) return;

        if (!string.IsNullOrEmpty(node.Path))
        {
            nodePathMap[node.Path] = node;
        }

        if (node.Children != null)
        {
            foreach (var child in node.Children)
            {
                // 트리뷰에 표시하기 위해 노드 준비
                PrepareNodeForTreeView(child);
                // 재귀적으로 맵 구축
                BuildNodePathMap(child);
            }
        }
    }

    private string GetArrayPreview(object array)
    {
        var arrayObj = array as Array;
        if (arrayObj == null) return "잘못된 배열";

        // 작은 배열인 경우 전체 표시
        if (arrayObj.Length <= 10)
        {
            return FormatArray(arrayObj);
        }

        // 큰 배열은 처음 5개와 마지막 5개만 표시
        var preview = new List<string>();
        for (int i = 0; i < 5; i++)
        {
            preview.Add(FormatValue(arrayObj.GetValue(i)));
        }
        preview.Add("...");
        for (int i = Math.Max(5, arrayObj.Length - 5); i < arrayObj.Length; i++)
        {
            preview.Add(FormatValue(arrayObj.GetValue(i)));
        }

        return $"[{string.Join(", ", preview)}]";
    }

    private string FormatArray(Array array)
    {
        var values = new List<string>();
        for (int i = 0; i < array.Length; i++)
        {
            values.Add(FormatValue(array.GetValue(i)));
        }
        return $"[{string.Join(", ", values)}]";
    }

    private string FormatValue(object? value)
    {
        if (value == null) return "null";
        if (value is float f) return f.ToString("0.###");
        if (value is double d) return d.ToString("0.###");
        return value.ToString() ?? "";
    }

    private string FormatAttributeValue(object? value)
    {
        if (value == null) return "null";

        // 에러 메시지인 경우 구분
        if (value is string str && str.StartsWith("Error reading attribute"))
        {
            return str;
        }

        // 숫자 포맷팅
        if (value is float f) return f.ToString("0.###");
        if (value is double d) return d.ToString("0.###");

        // 배열 포맷팅
        if (value.GetType().IsArray)
        {
            return GetArrayPreview(value);
        }

        return value.ToString() ?? "";
    }

    private async Task OnNodeSelected(TreeViewNodeEventArgs args)
    {
        try
        {
            if (args.NodeInfo == null)
            {
                //Console.WriteLine("NodeInfo가 null입니다.");
                return;
            }

            string? nodePath = args.NodeInfo.Name;
            //Console.WriteLine($"선택된 노드 경로: {nodePath}");

            if (string.IsNullOrEmpty(nodePath))
            {
                //Console.WriteLine("선택된 노드의 경로가 null 또는 빈 문자열입니다.");
                return;
            }

            if (nodePathMap.TryGetValue(nodePath, out var node))
            {
                currentNode = node;
                await OnNodeClicked.InvokeAsync(currentNode);
            }
            else
            {
                //Console.WriteLine($"경로 '{nodePath}'에 해당하는 노드를 찾을 수 없습니다.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"노드 선택 처리 중 오류: {ex.Message}");
            Console.WriteLine($"스택 트레이스: {ex.StackTrace}");
        }
    }

    private void CheckedChanged(bool bMode)
    {
        ShowAttribute = bMode;
    }
}
